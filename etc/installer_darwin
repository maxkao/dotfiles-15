#!/bin/sh
set -eu pipefail

trap catch ERR

function catch() {
  log_fail "Failed to installation."
}

prepare() {
  if is_not_exists brew; then
    ruby -e "$(curl -fsSL https://githubusercontent.com/Homebrew/install/master/install)"
    log_pass "Homebrew installation is completed."
  else
    log_warn "Homebrew is already installed."
  fi

  log_info "Prepare Homebrew..."
  brew cleanup
  brew update
  brew tap --repair
  log_pass "All green!"
}

setup_packages() {
  log_info "Install Packages..."
  while read pkg
  do
    if ! brew list | grep $pkg &>/dev/null; then
      log_info "Installing $pkg..."
      brew install $pkg
    else
      log_warn "$pkg is already installed"
    fi
  done < "$dotpath/pkg/brew.txt"
  log_pass "Packages installation is completed."
}

setup_applications() {
  log_info "Install Applications..."
  while read pkg
  do
    if ! brew cask list | grep $pkg &>/dev/null; then
      log_info "Installing $pkg..."
      brew cask install $pkg
    else
      log_warn "$pkg is already installed."
    fi
  done < "$dotpath/pkg/brew_cask.txt"
  log_pass "Applications installation is completed."
}

# TODO: tool check
# git

readonly githubUser="paveg"
readonly githubRepo="dotfiles"
readonly dotpath="$HOME/dotfiles"
readonly repoUrl="https://github.com/$githubUser/$githubRepo.git"

# include library
. "$dotpath/lib/utilities.sh"

log_info "start installing..."

# configuration brew cask
if [[ -z "${HOMEBREW_CASK_OPTS:-}" ]]; then
  export HOMEBREW_CASK_OPTS="--appdir=/Applications"
fi

if [[ ! -d $dotpath ]]; then
  git clone $repoUrl $dotpath
fi

prepare
if ! is_ci; then
  setup_applications
fi
setup_packages

log_info "symbolic link: $dotpath/.zshenv to $HOME/.zshenv"
ln -sf "$dotpath/.zshenv" "$HOME/.zshenv"
log_pass "dotfiles OK."
